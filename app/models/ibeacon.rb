class Ibeacon < ApplicationRecord
    require 'matrix.rb'
    require 'nmatrix'
    require './lib/algorithm.rb'
    require './lib/rotate.rb'

    def classify_exercise(x,y,z)
        # RubyProf.start
        # p Algorithm.array_string_to_array("531.0,-31.0,-125.0,265.0,-281.0,375.0,250.0,-437.0,359.0,-171.0,-46.0,-156.0,-46.0,")
        
        x1 = [[0.1442763 ,  0.08166766,  0.00336196,  0.24316518, -0.04209763,
       -0.02873368,  0.09229835, -0.08131247,  0.05677701,  0.07440869,
       -0.16654544, -0.11343043, -0.06619593,  0.18029242, -0.07553113,
        0.09111595, -0.12183691, -0.01883052,  0.07718898, -0.46122055,
       -0.02120956,  0.19413607,  0.16559623, -0.14828236, -0.05896871,
        0.06562002,  0.05995296,  0.10757871,  0.0298305 ,  0.04074807,
        0.08863781, -0.03317638, -0.2254777 , -0.13380348, -0.31161665,
        0.1625952 ,  0.07988403, -0.00623931,  0.31607943,  0.06766875,
        0.35163521, -0.00495626,  0.53278898, -0.33274285,  0.3434369 ,
        0.08136304, -0.50289907, -0.1876298 , -0.58936759
]]
        y1 = [[1.22272025,  1.38075891, -0.60355702, -0.09364691,  2.63104952,
       -0.64203597, -0.59786024,  3.03967684,  1.92249714, -1.06296462,
        0.46757342, -0.79311404, -1.5053383 ,  1.6237671 ,  0.84338709,
       -0.97085648,  2.54836336, -0.4315903 , -1.8748668 ,  0.18427191,
       -0.56976799, -1.772341  ,  0.92401154, -0.96139234, -0.9640739 ,
        2.14050246, -0.82242796, -1.63986009,  1.63892802,  0.03618445,
       -1.2029737 , -1.75814533, -1.42156634, -0.91531265,  0.79417073,
       -0.23718034,  1.24738085, -1.30707233, -0.60161314, -0.30314719,
        2.21129914,  0.63562826, -2.55080914, -0.29675926,  2.35500996,
       -1.65595321, -1.67666354,  0.43405097,  0.95165823
]]
        z1 = [[-0.17989864, -0.31067014, -0.93027732, -0.73317213,  2.63528356,
       -0.66938202, -0.87152852,  2.89727223,  0.87143536, -0.39013583,
       -0.49428317, -1.13492237,  0.54210316,  0.22781834, -0.99317592,
       -0.3153518 ,  2.01779984, -0.72535437,  0.46980275, -0.97226733,
       -0.82357563,  0.20782903, -0.173051  , -0.66555722, -0.91349955,
        1.12770511, -0.33532035,  0.2473015 , -0.06363829, -1.17920856,
        0.33867511,  1.00061297,  0.50269033, -0.21205915, -0.30298825,
       -0.57830639,  1.08002006, -0.54440341, -0.93714158, -0.42785361,
        1.98102187,  1.07887143, -0.76465773, -0.53353727,  2.14850853,
       -0.78377262, -0.57336848, -0.71945898, -0.12293357
]]

        # press1
        x2 = [[-1.03307151e+00,   6.02881611e-01,   6.45384190e-01,
         1.70936631e-01,   1.44939588e-01,   8.35871022e-02,
         4.79125065e-01,   3.04581403e-01,  -1.19957401e-01,
        -7.92671457e-02,  -3.47081875e-02,  -4.87461401e-02,
        -2.98731757e-01,  -2.05581762e-02,   7.30548506e-02,
         6.79315015e-01,  -1.50383553e-01,  -1.27823768e-03,
        -5.16576390e-01,  -2.02314876e-01,   4.14002742e-02,
        -9.36300101e-01,   5.28926009e-01,   6.24201323e-01,
        -8.57154031e-01,  -2.64836488e-01,   1.85550932e-01,
        -1.12387437e+00,   4.35859442e-01,  -5.81365325e-03,
         3.98753483e-01,   9.62140061e-01,   1.60081936e-01,
         5.37590561e-01,   5.08708160e-02,   1.06425778e+00,
        -3.26560351e-01,   2.58345449e-01,  -1.63015111e-01,
         7.69567659e-01,  -1.18481701e-01,   5.37374184e-01,
        -2.44446699e+00,   3.64103886e-02,  -1.02903958e+00
]]
        y2 = [[3.61799124,  0.02929641,  0.89913053, -0.05114487, -0.16045217,
       -0.51648374, -0.08035501, -0.15840039, -0.81124545, -1.09378299,
       -0.61147551, -0.97084954, -0.69295102, -0.41136071, -0.09064433,
        0.52589613, -0.99363682, -0.32167511, -0.94369119, -0.74434713,
       -0.1793845 , -1.67759476,  0.13226405, -0.52753933, -0.97890134,
        3.80002811,  3.01130946, -0.81428567, -0.07512079, -0.79722597,
       -0.48861604,  0.55507186,  0.09553222, -1.11472363, -0.01830434,
        0.55737273, -0.94712319, -0.82835498,  0.13789939,  0.15500974,
       -1.66268253,  0.12126585, -0.49619529,  2.70727425,  2.91320638
]]
        z2 = [[0.87657699,  0.58419423,  0.27536388, -0.84548375,  1.03507971,
       -2.15770746,  0.40684142,  0.04158859,  0.84033153, -0.69933139,
       -0.07007689, -0.32098859, -0.82300639,  0.39460537, -1.91268296,
        0.80709598, -0.79952113,  0.08704742, -0.57982264,  0.05424104,
        0.55624608, -1.63703227,  0.47762627, -1.02143604,  1.21799995,
        2.26561363,  0.94663744,  0.38371772,  0.55928629, -0.08657591,
       -0.11208038,  1.46493658,  0.39091492, -2.50295275,  0.0545948 ,
        1.07297697, -0.80020124, -1.38355019,  0.2263847 ,  0.02398164,
       -1.81225668,  0.72180291,  0.24144163,  1.02278091,  0.53479807
]]

        # row1
        x3 = [[-1.33805122,  0.31407383,  0.33457285,  0.0128374 ,  2.02750902,
        0.45476978,  1.64056705, -1.45589595, -0.34252396, -0.24976036,
       -0.13048102, -1.05032071, -0.12002337, -0.55047175,  0.85843217,
       -0.71853035,  0.18394429, -0.47084973,  2.15132336, -0.58425836,
       -0.96686296, -1.3835064 , -0.65279075,  0.24122803,  0.31221065,
        0.07157166,  1.35715136,  0.15113143, -0.25598689,  0.07135412,
       -0.06207748,  1.08898694,  0.18434847,  1.06768187, -2.19130302
]]
        y3 = [[-1.46280427, -1.58369123,  0.45699254, -0.68176591, -1.2031964 ,
       -1.24238551, -0.24909516, -0.5827474 , -0.24735033, -0.94314604,
        2.13541339, -0.57968253,  0.96522711, -0.25430247,  1.35394723,
        0.18827396,  1.07279135,  0.03948884,  0.51520918,  0.73649326,
        1.56633038,  0.11186186, -1.41593839, -1.65642526,  1.61359717,
        1.08442806, -0.96450462, -0.31694193,  2.49729785, -0.03930992,
        0.1422218 , -0.3143559 ,  0.01948033, -0.08129101, -0.68012005
]]
        z3 = [[-1.35180113, -0.49974334,  0.52128244, -0.38163037,  0.23108745,
       -0.40263   ,  1.56056658, -1.04920706, -0.44600552, -0.79495497,
        1.90133891, -0.50693615,  1.13850761, -0.56818064,  1.71971627,
       -0.74348234,  1.29566176, -0.87332394,  0.97992494, -0.75747615,
       -0.97271432,  0.10986879, -0.66674191, -0.71070764,  1.82540894,
        1.43809521,  0.04429721, -0.84551104,  1.89190325, -1.05433043,
       -1.10675365, -0.09603704, -0.65452672, -0.61305028,  0.43808532
]]

        xx = [Algorithm.array_string_to_array(x)]
        yy = [Algorithm.array_string_to_array(y)]
        zz = [Algorithm.array_string_to_array(z)]

        choices = ["Curl","Shoulder Press","Row"]

        pol = 3
        pol2 = pol

        
       
        big_1 = x1.transpose
        big_1 = (big_1.transpose << y1[0]).transpose
        big_1 = (big_1.transpose << z1[0]).transpose

        big_2 = x2.transpose
        big_2 = (big_2.transpose << y2[0]).transpose
        big_2 = (big_2.transpose << z2[0]).transpose

        big_3 = x3.transpose
        big_3 = (big_3.transpose << y3[0]).transpose
        big_3 = (big_3.transpose << z3[0]).transpose

        big_4 = xx.transpose
        big_4 = (big_4.transpose << yy[0]).transpose
        big_4 = (big_4.transpose << zz[0]).transpose
        theta = Rotate.angle_guess_3d(big_4)
        datr3 = Rotate.rotate_3d(big_4, theta).transpose
        datr3[0] = datr3[0].collect{ |ele| ele - (datr3[0]).mean}
        datr3[0] = datr3[0].collect{ |ele| ele / (datr3[0]).standard_deviation}
        datr3[1] = datr3[1].collect{ |ele| ele - (datr3[1]).mean}
        datr3[1] = datr3[1].collect{ |ele| ele / (datr3[1]).standard_deviation}
        datr3[2] = datr3[2].collect{ |ele| ele - (datr3[2]).mean}
        datr3[2] = datr3[2].collect{ |ele| ele / (datr3[2]).standard_deviation}
        datr3 = datr3.transpose
        theta = Rotate.angle_guess_2d(datr3)
        datr2 = Rotate.rotate_2d(datr3, theta).transpose
        if Rotate.slope(N[*datr2[1]],N[*datr3.transpose[2]]) < 0.0
          datr2[0] = datr2[0].collect{ |ele| ele *-1.0}
          datr2[1] = datr2[1].collect{ |ele| ele *-1.0}
        end
        big_4 = [datr2[0],datr2[1],datr3.transpose[2]].transpose

        

         
        
        # data = big_4.transpose[1..2].transpose + big_1.transpose[1..2].transpose + big_2.transpose[1..2].transpose + big_3.transpose[1..2].transpose
        data = big_4 + big_1 + big_2 + big_3
        data = Algorithm.feature_matrix(data.transpose).transpose
        logistic_guess = Algorithm.nonlinear_logistic_regression_tester(choices ,data,pol,pol2, [xx[0].length, x1[0].length, x2[0].length, x3[0].length])
        p "Exercise is a: " + choices[logistic_guess].to_s
        return choices[logistic_guess].to_s
        # result = RubyProf.stop
        # printer = RubyProf::CallStackPrinter.new(result)
        # File.open("tmp/profile_data2.html", 'w') { |file| printer.print(file) }
    end
end
