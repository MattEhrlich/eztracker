class Ibeacon < ApplicationRecord
    require 'matrix.rb'
    require 'nmatrix'
    require './lib/algorithm.rb'
    require './lib/rotate.rb'

    def classify_exercise(x,y,z)
        # RubyProf.start
        # p Algorithm.array_string_to_array("531.0,-31.0,-125.0,265.0,-281.0,375.0,250.0,-437.0,359.0,-171.0,-46.0,-156.0,-46.0,")
        
        x1 = [[0.1442763 ,  0.08166766,  0.00336196,  0.24316518, -0.04209763,
       -0.02873368,  0.09229835, -0.08131247,  0.05677701,  0.07440869,
       -0.16654544, -0.11343043, -0.06619593,  0.18029242, -0.07553113,
        0.09111595, -0.12183691, -0.01883052,  0.07718898, -0.46122055,
       -0.02120956,  0.19413607,  0.16559623, -0.14828236, -0.05896871,
        0.06562002,  0.05995296,  0.10757871,  0.0298305 ,  0.04074807,
        0.08863781, -0.03317638, -0.2254777 , -0.13380348,  0.04657841,
       -0.03403952,  0.09164724,  0.13568378, -0.14598029, -0.01281943,
        0.09394063,  0.20765066, -0.13560474,  0.05210415,  0.1661723 ,
       -0.03462977,  0.16412512, -0.27107458, -0.01767548,  0.05298257,
       -0.04141746, -0.2666813 ,  0.02690523,  0.15457313,  0.12111287,
        0.03129254, -0.38484604
]]
        y1 = [[1.22272025,  1.38075891, -0.60355702, -0.09364691,  2.63104952,
       -0.64203597, -0.59786024,  3.03967684,  1.92249714, -1.06296462,
        0.46757342, -0.79311404, -1.5053383 ,  1.6237671 ,  0.84338709,
       -0.97085648,  2.54836336, -0.4315903 , -1.8748668 ,  0.18427191,
       -0.56976799, -1.772341  ,  0.92401154, -0.96139234, -0.9640739 ,
        2.14050246, -0.82242796, -1.63986009,  1.63892802,  0.03618445,
       -1.2029737 , -1.75814533, -1.42156634, -0.91531265, -0.41810727,
        2.23541912, -0.95012932, -0.13875522, -0.73891368, -1.28715864,
        1.54009663, -1.49078423,  2.74450973, -1.17868371,  1.24378234,
       -1.10738345,  0.9333192 , -0.94227481,  0.50000984, -2.11722673,
        2.37464612, -1.05385821,  0.94562083, -1.92836531,  1.61756721,
       -0.63512087, -0.14820958
]]
        z1 = [[-0.17989864, -0.31067014, -0.93027732, -0.73317213,  2.63528356,
       -0.66938202, -0.87152852,  2.89727223,  0.87143536, -0.39013583,
       -0.49428317, -1.13492237,  0.54210316,  0.22781834, -0.99317592,
       -0.3153518 ,  2.01779984, -0.72535437,  0.46980275, -0.97226733,
       -0.82357563,  0.20782903, -0.173051  , -0.66555722, -0.91349955,
        1.12770511, -0.33532035,  0.2473015 , -0.06363829, -1.17920856,
        0.33867511,  1.00061297,  0.50269033, -0.21205915, -0.87437191,
        1.17933287, -0.29678624, -0.43711621, -1.06001687, -0.89235472,
        0.15865636, -0.33026769,  2.70023149,  0.02159069,  0.22651023,
       -0.36743107,  0.40371588, -1.36036188, -0.53712477, -0.77071734,
        2.43394473,  0.23632819,  0.29588121, -0.59511623,  1.0105552 ,
       -0.43338137, -0.71170055
]]

        # press1
        x2 = [[-1.03307151e+00,   6.02881611e-01,   6.45384190e-01,
         1.70936631e-01,   1.44939588e-01,   8.35871022e-02,
         4.79125065e-01,   3.04581403e-01,  -1.19957401e-01,
        -7.92671457e-02,  -3.47081875e-02,  -4.87461401e-02,
        -2.98731757e-01,  -2.05581762e-02,   7.30548506e-02,
         6.79315015e-01,  -1.50383553e-01,  -1.27823768e-03,
        -5.16576390e-01,  -2.02314876e-01,   4.14002742e-02,
        -9.36300101e-01,   5.28926009e-01,   6.24201323e-01,
        -8.57154031e-01,  -2.64836488e-01,   1.85550932e-01,
        -9.70309284e-01,   3.51535073e-01,  -4.01076537e-01,
         3.96333286e-01,   4.86231411e-01,   1.49074152e-01,
        -1.99822134e-01,   1.39455928e-01,   6.74779184e-02,
        -2.41184650e-01,   3.71885090e-02,   3.25649202e-01,
        -2.88222570e-01,  -8.32846463e-02,  -3.00082345e-01,
         4.16863659e-01,   1.49465266e-01,   6.85328716e-01,
        -1.44216847e-01,   7.63821050e-01,   6.54571799e-03,
         7.01942934e-01,  -1.45110605e+00,  -2.82891158e-01,
        -2.01837367e-01,  -1.12879233e-01
]]
        y2 = [[3.61799124,  0.02929641,  0.89913053, -0.05114487, -0.16045217,
       -0.51648374, -0.08035501, -0.15840039, -0.81124545, -1.09378299,
       -0.61147551, -0.97084954, -0.69295102, -0.41136071, -0.09064433,
        0.52589613, -0.99363682, -0.32167511, -0.94369119, -0.74434713,
       -0.1793845 , -1.67759476,  0.13226405, -0.52753933, -0.97890134,
        3.80002811,  3.01130946,  2.20282131,  1.0342293 , -0.54344634,
       -0.47965363, -0.44271919, -0.85423762, -0.95120036, -1.41323041,
       -0.31278744, -0.55843582, -0.49065527, -0.30901463, -0.60901342,
       -0.47489516, -0.97846944, -0.29147201, -0.70348449,  0.19215529,
       -0.9222859 ,  0.26581511, -0.76017818,  0.43082125, -1.98925217,
        3.45570909,  2.62811199,  2.87476816
]]
        z2 = [[0.87657699,  0.58419423,  0.27536388, -0.84548375,  1.03507971,
       -2.15770746,  0.40684142,  0.04158859,  0.84033153, -0.69933139,
       -0.07007689, -0.32098859, -0.82300639,  0.39460537, -1.91268296,
        0.80709598, -0.79952113,  0.08704742, -0.57982264,  0.05424104,
        0.55624608, -1.63703227,  0.47762627, -1.02143604,  1.21799995,
        2.26561363,  0.94663744,  1.30340036, -1.81283334,  0.96782235,
       -1.47157682,  0.50289311, -0.44218352,  0.40444981, -2.54953049,
        1.17394523, -0.44379002,  1.10788504, -0.48645202, -0.85033084,
       -0.12907022, -0.16494935,  0.0047662 , -0.61595845,  0.20863545,
       -1.33279895,  0.11561029, -0.02978351,  0.43506542,  0.69469325,
        1.27321296,  0.74848466,  1.38839339
]]

        # row1
        x3 = [[-1.33805122,  0.31407383,  0.33457285,  0.0128374 ,  2.02750902,
        0.45476978,  1.64056705, -1.45589595, -0.34252396, -0.24976036,
       -0.13048102, -1.05032071, -0.12002337, -0.55047175,  0.85843217,
       -0.71853035,  0.18394429, -0.47084973,  2.15132336, -0.58425836,
       -0.96686296, -0.44451534,  2.36504959,  1.22319566, -1.33880489,
       -0.36172441,  0.59870464,  0.47088969,  0.24359184,  0.11485631,
        0.24859106, -1.16685078,  0.6219021 ,  0.62324299, -0.61931456,
       -0.21778066, -0.61079042, -1.10334153,  0.09963164,  0.43982335,
       -1.18635627
]]
        y3 = [[-1.46280427, -1.58369123,  0.45699254, -0.68176591, -1.2031964 ,
       -1.24238551, -0.24909516, -0.5827474 , -0.24735033, -0.94314604,
        2.13541339, -0.57968253,  0.96522711, -0.25430247,  1.35394723,
        0.18827396,  1.07279135,  0.03948884,  0.51520918,  0.73649326,
        1.56633038, -1.29074328,  0.14637788,  0.15495325,  0.18849285,
       -0.69063984,  0.92243081,  1.212672  ,  0.34489208,  1.01299407,
       -0.12338541,  0.85967951, -0.11438787,  0.14100907,  0.66760337,
       -0.13618395, -0.07571659,  1.73568893,  0.21229162, -3.27189016,
       -1.89613834
]]
        z3 = [[-1.35180113, -0.49974334,  0.52128244, -0.38163037,  0.23108745,
       -0.40263   ,  1.56056658, -1.04920706, -0.44600552, -0.79495497,
        1.90133891, -0.50693615,  1.13850761, -0.56818064,  1.71971627,
       -0.74348234,  1.29566176, -0.87332394,  0.97992494, -0.75747615,
       -0.97271432,  0.31121145, -1.20469182, -0.40121005,  1.46222273,
       -1.19004499,  0.00860155,  0.46919193, -0.33720825, -0.04799111,
       -0.41504665,  2.00327556, -0.69666194, -0.51086699,  1.66930401,
       -1.01613421, -0.48295352,  2.06468555, -0.89939946, -0.52608983,
       -0.26019399
]]

        xx = [Algorithm.array_string_to_array(x)]
        yy = [Algorithm.array_string_to_array(y)]
        zz = [Algorithm.array_string_to_array(z)]

        choices = ["Curl","Shoulder Press","Row"]

        pol = 4
        pol2 = pol

        
       
        big_1 = x1.transpose
        big_1 = (big_1.transpose << y1[0]).transpose
        big_1 = (big_1.transpose << z1[0]).transpose

        big_2 = x2.transpose
        big_2 = (big_2.transpose << y2[0]).transpose
        big_2 = (big_2.transpose << z2[0]).transpose

        big_3 = x3.transpose
        big_3 = (big_3.transpose << y3[0]).transpose
        big_3 = (big_3.transpose << z3[0]).transpose

        big_4 = xx.transpose
        big_4 = (big_4.transpose << yy[0]).transpose
        big_4 = (big_4.transpose << zz[0]).transpose
        theta = Rotate.angle_guess_3d(big_4)
        datr3 = Rotate.rotate_3d(big_4, theta).transpose
        datr3[0] = datr3[0].collect{ |ele| ele - (datr3[0]).mean}
        datr3[0] = datr3[0].collect{ |ele| ele / (datr3[0]).standard_deviation}
        datr3[1] = datr3[1].collect{ |ele| ele - (datr3[1]).mean}
        datr3[1] = datr3[1].collect{ |ele| ele / (datr3[1]).standard_deviation}
        datr3[2] = datr3[2].collect{ |ele| ele - (datr3[2]).mean}
        datr3[2] = datr3[2].collect{ |ele| ele / (datr3[2]).standard_deviation}
        datr3 = datr3.transpose
        theta = Rotate.angle_guess_2d(datr3)
        datr2 = Rotate.rotate_2d(datr3, theta).transpose
        if Rotate.slope(N[*datr2[1]],N[*datr3.transpose[2]]) < 0.0
          datr2[0] = datr2[0].collect{ |ele| ele *-1.0}
          datr2[1] = datr2[1].collect{ |ele| ele *-1.0}
        end
        big_4 = [datr2[0],datr2[1],datr3.transpose[2]].transpose


         
        
        # data = big_4.transpose[1..2].transpose + big_1.transpose[1..2].transpose + big_2.transpose[1..2].transpose + big_3.transpose[1..2].transpose
        data = big_4 + big_1 + big_2 + big_3
        # data = Algorithm.feature_matrix(data.transpose).transpose
        logistic_guess = Algorithm.nonlinear_logistic_regression_tester(choices ,data,pol,pol2, [xx[0].length, x1[0].length, x2[0].length, x3[0].length])
        p "Exercise is a: " + choices[logistic_guess].to_s
        return choices[logistic_guess].to_s
        # result = RubyProf.stop
        # printer = RubyProf::CallStackPrinter.new(result)
        # File.open("tmp/profile_data2.html", 'w') { |file| printer.print(file) }
    end
end
