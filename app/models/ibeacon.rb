class Ibeacon < ApplicationRecord
    require 'matrix.rb'
    require 'nmatrix'
    require './lib/algorithm.rb'
    require './lib/rotate.rb'

    def classify_exercise(x,y,z)
        # RubyProf.start
        # p Algorithm.array_string_to_array("531.0,-31.0,-125.0,265.0,-281.0,375.0,250.0,-437.0,359.0,-171.0,-46.0,-156.0,-46.0,")
        
        # curl1
        x1 = Algorithm.ranging([[0.08014493,  0.17686488,  0.27810697,  0.48503743,  0.40595285,
       -0.18489804,  0.16083565,  0.07502256,  0.40395447,  0.32525666,
       -0.15424508,  0.3577072 ,  0.14883065,  0.01490105, -0.13758876,
        0.23303759,  0.27060667,  0.21494887, -0.20568956, -0.09833811,
       -0.03098082,  0.22203876,  0.09943914, -0.27357663,  0.34899949,
        0.49179253,  0.55645179,  0.23900246,  0.38540959,  0.06558189,
        0.42584582,  0.01744286,  0.24918256,  0.08128769,  0.78590943,
        0.4424248 ,  0.57739231,  0.07456847,  0.33922788,  0.30421519,
       -0.78209727, -0.95723442, -0.30136096, -0.62598421,  0.13465689,
       -0.91036197, -0.20999589, -0.36234029,  0.23193469, -0.42963525,
        0.12526007, -0.35914749,  0.11462736, -0.72071539,  0.25292363,
       -0.58965177,  0.1135618 , -0.3574575 , -0.03521262, -0.40609686,
       -0.11186895, -0.99845039, -0.25139227, -0.97707395, -0.16296888,
        0.32397781
]])
        y1 = Algorithm.ranging([[0.71143059,  1.36429866,  1.25823107,  2.16562245,  1.31900516,
        0.72550182,  1.88623293,  2.13556634, -0.68030569, -1.53829934,
        2.21841723,  1.1689793 ,  2.10951983,  0.57080859,  1.90827312,
        1.53200136,  1.09843734,  0.27735111,  2.31397153,  0.10719173,
        2.31215774, -0.57564039, -1.62571682,  1.3523201 , -0.47424222,
        0.04940042, -0.01719409,  1.22819844, -0.27311764,  1.26740206,
       -1.11837129,  2.45883096, -1.51748251,  2.29744894, -1.24726399,
        1.01491789, -1.62613066,  0.9696524 , -1.79100149, -1.6559173 ,
        0.37876827,  0.55690369, -1.11725599, -1.01728359, -2.05269396,
       -0.33286029, -1.12219488, -1.33335884, -1.61759519, -1.00170845,
       -2.23696323, -1.5336985 , -1.22216728,  0.24184446, -1.10841537,
       -0.88378769, -0.86150028, -0.65235895, -0.45720418, -0.99404873,
       -0.96029413,  0.02489343, -1.33416222,  0.24021136, -1.59421596,
       -1.68933918
]])
        z1 = Algorithm.ranging([[-0.40161307,  0.10384516, -0.02381678,  0.17477718, -0.05754241,
       -1.29377693,  0.19920479,  1.70934092,  0.49296428,  0.50645591,
        1.07898749, -0.82812243,  1.52985426, -0.68097553,  0.59443981,
       -0.34878013, -0.91643935, -1.26268609,  2.25826548, -1.21237304,
        3.387983  , -0.80345723,  0.39559959,  0.53049668, -0.6447803 ,
       -0.77479254, -1.32906466, -0.09785185, -1.0939174 ,  0.13313047,
       -0.26265717,  3.23724708, -0.24000057,  2.6021815 , -0.42137543,
        0.81533956, -0.33642951,  1.30632681,  0.8900335 ,  0.54054172,
        0.39936292, -0.32758365, -0.91885469, -0.5756624 , -0.41904098,
        0.55920751, -0.23024721, -0.59792659, -0.50508119, -0.48235811,
        0.1629323 , -0.51296819, -0.5734395 ,  0.20134097, -0.46988861,
       -0.6675972 , -0.93502474, -0.34792529, -0.69528252, -1.28031025,
       -0.80006984, -0.24789694, -0.7045483 , -0.20464635,  0.17989256,
        0.53705352
]])

        # press1
        x2 = Algorithm.ranging([[-0.02965182, -0.0830002 , -1.13368511,  0.24149061, -1.01880967,
       -0.01818329,  0.33803124,  0.31736541, -0.01206935,  0.33952934,
       -0.20386667,  0.14491259,  0.77394437,  0.15284131, -0.10588473,
        0.01847005, -0.17819913,  0.25159481,  0.0211526 , -0.04357035,
       -0.45402672, -0.73909819,  0.04708076,  0.03329958,  0.61305068,
       -0.49943657, -0.54680299, -0.32267152,  0.52969241,  0.48648338,
        0.00794698,  0.00583476,  0.51096527,  0.31786018,  0.17265755,
        0.25819049,  0.205752  ,  0.3890979 ,  0.17217582, -0.25371998,
       -0.25405725, -0.31637098, -0.11383232, -0.50700015,  0.17192593,
        0.23445926, -0.33109761, -0.11466506,  0.42159214,  0.38741384,
       -0.12013609,  0.09613123,  0.03494162,  0.11046622,  0.48487579,
       -0.27715814,  0.00817356, -0.13176644, -0.50217202,  0.01153267
]])
        y2 = Algorithm.ranging([[-0.8741729 , -0.3860562 , -1.32864926, -0.48309924, -0.22485998,
        2.86445003,  1.45444902, -1.40171607, -0.63226039, -1.18678109,
       -1.75872671, -0.2441492 , -1.26936315, -1.06575435, -0.8215662 ,
       -1.66502529, -0.51386604,  2.05467865,  2.74705355,  2.74679015,
        3.55651485, -0.98740131, -1.5119514 , -0.55401308,  0.3753163 ,
       -0.71375791, -1.0476203 , -1.10054344,  0.19597162,  0.30180919,
       -0.34229881, -1.47987291,  0.20016158,  0.0507005 , -0.20188787,
       -1.40606326, -0.036916  ,  0.28257621, -0.23785639, -1.19885554,
       -0.68521395,  3.21262083,  2.84596295,  0.43855666,  0.44608229,
        0.59460974, -0.89079026, -1.02836207,  0.22868029, -0.00993585,
       -0.63545248, -0.88557696, -0.18826358, -0.20233384,  0.26543385,
       -0.47268603, -0.41680378, -0.5842896 ,  3.1494479 ,  2.66292652
]])
        z2 = Algorithm.ranging([[0.28546346,  0.43851099, -0.46038615,  0.40055863,  0.43339763,
        1.94371167,  0.46976267, -0.59233475, -0.38953608, -0.65031709,
       -1.51599753,  0.86919656, -1.13392953, -0.26503744,  0.43238874,
       -1.01354234,  0.51478269,  0.04540557,  1.23625233,  1.54830286,
        0.98400625, -1.75212064, -1.60601621, -0.62976518,  0.59743561,
       -1.17480482, -1.08339446, -1.55086843,  0.62125332,  0.62963736,
       -0.06951066, -2.40447676,  0.53210475,  0.71221874,  0.45618768,
       -2.2052426 ,  0.13606687,  0.94999802,  0.3735881 , -1.83782317,
       -0.47393258,  1.15074428,  1.62188543,  0.69751327,  0.38037754,
        1.03982928, -0.47528457, -0.94938145,  0.77860332,  0.72069428,
       -0.10352807, -1.46812283,  0.19303307,  0.12816589,  0.76250244,
       -0.34460738, -0.23416834, -0.48148402,  1.33905427,  1.44297951
]])

        # row1
        x3 = Algorithm.ranging([[0.90845134,  2.1742931 ,  1.72838029,  1.26206795,  0.89637729,
        1.19832634, -1.06625584, -2.04074255,  0.77899645,  1.56872735,
        0.76023183,  1.10950762, -0.26545522,  0.44506639,  0.0818849 ,
        0.9059058 ,  0.05738081, -0.02048842, -1.30287191, -1.37788355,
        1.16944812,  1.21341724,  0.4901667 ,  1.15405783,  0.95440021,
        0.3605475 ,  0.58807899,  0.60330498, -0.38435004, -0.34419827,
       -0.45758224, -0.32511402, -0.86626658, -1.11955476,  0.22083039,
       -0.92511774, -0.26202367,  0.62261468, -0.43875329, -0.68982011,
       -0.08148729,  0.84984188,  0.61576742, -0.21415628, -1.22934032,
       -1.66283071,  0.51147247,  0.47451401,  0.11427206, -1.41532594,
       -1.52750035,  0.03191437, -0.02248888, -0.24501825,  0.56252964,
       -0.40334835, -0.3498755 ,  0.03773171, -0.50972212,  0.21549698,
       -0.02819091, -0.13762859, -1.08338418,  0.84107692,  0.01067246,
       -1.23542058, -1.73491194, -1.75064555
]])
        y3 = Algorithm.ranging([[-1.63082536,  0.23207986, -0.16322011, -1.52924297,  1.96280704,
       -0.9609591 , -0.19607492,  0.02279381,  0.37721185,  0.11279394,
       -0.54231599, -0.013578  , -0.83772295, -0.85064444,  0.79071467,
       -0.66020266, -1.43201763,  0.92738631,  0.31139739, -0.47470005,
        0.56724951,  0.33756396, -1.52286055,  0.21931098,  0.33242368,
       -1.0182046 ,  0.55687637, -0.59856635, -0.60645927,  1.17798954,
       -0.93123355, -0.0053914 ,  1.66341684, -1.31434238, -0.32426439,
        3.1450174 , -0.44337095,  0.55530584,  2.12860426, -0.82299681,
       -0.34818965,  1.32300538, -0.15125421, -0.76006583, -0.31441287,
       -0.20332959, -0.33948722,  0.05487239, -0.37429302,  0.51918709,
       -1.31686088, -0.60271016,  2.13235337, -1.13749052, -0.43564979,
        1.36459724, -1.44190168, -1.57623418,  1.66562561,  0.04973211,
       -0.44134153,  1.66616947, -1.26471786,  1.30264987,  2.59980387,
       -0.40765154,  0.1226187 , -0.22677338
]])
        z3 = Algorithm.ranging([[-0.7157312 ,  0.46619354,  0.44138026, -0.07403472,  1.87022471,
       -0.86389671, -0.14573037, -0.12535431,  0.36863091,  0.27051109,
        0.23980366,  0.07912319, -0.80348318, -0.90965238,  1.16900139,
       -0.41769582, -0.82242112,  1.47140213,  0.41958966, -0.18516619,
        0.27031787,  0.50869446, -1.04413203, -0.05999934,  0.20536457,
       -0.86521781, -0.23847339, -0.81360407, -0.45854341,  0.67111693,
       -0.75510692, -0.32990302,  1.97267381, -1.43434166, -0.40865921,
        3.03643491, -0.79396192, -0.53135489,  2.10203132, -1.37099653,
       -0.35689035,  0.14134796,  0.2418226 , -0.11001783, -0.3261208 ,
       -0.16696418, -0.33354692, -0.03359082, -1.06782176,  0.33918923,
       -1.74251518, -0.63771529,  1.92285944, -1.06090026, -0.66896746,
        1.73054875, -1.12924616, -0.9338531 ,  1.88926085, -0.33692071,
       -0.68775462,  1.31428327, -1.3654487 ,  0.20356521,  2.42661384,
       -0.56523333,  0.12264608, -0.20366396
]])

        xx = Algorithm.ranging([Algorithm.array_string_to_array(x)])
        yy = Algorithm.ranging([Algorithm.array_string_to_array(y)])
        zz = Algorithm.ranging([Algorithm.array_string_to_array(z)])

        choices = ["Curl","Shoulder Press","Row"]

        pol = 5
        pol2 = pol

        beginning_time = Time.now
        p "========================"
        big_1 = x1.transpose
        big_1 = (big_1.transpose << y1[0]).transpose
        big_1 = (big_1.transpose << z1[0]).transpose

        big_2 = x2.transpose
        big_2 = (big_2.transpose << y2[0]).transpose
        big_2 = (big_2.transpose << z2[0]).transpose

        big_3 = x3.transpose
        big_3 = (big_3.transpose << y3[0]).transpose
        big_3 = (big_3.transpose << z3[0]).transpose

        big_4 = xx.transpose
        big_4 = (big_4.transpose << yy[0]).transpose
        big_4 = (big_4.transpose << zz[0]).transpose
        theta = Rotate.angle_guess_3d(big_4)
        datr3 = Rotate.rotate_3d(big_4, theta).transpose
        datr3[0] = datr3[0].collect{ |ele| ele - (datr3[0]).mean}
        datr3[0] = datr3[0].collect{ |ele| ele / (datr3[0]).standard_deviation}
        datr3[1] = datr3[1].collect{ |ele| ele - (datr3[1]).mean}
        datr3[1] = datr3[1].collect{ |ele| ele / (datr3[1]).standard_deviation}
        datr3[2] = datr3[2].collect{ |ele| ele - (datr3[2]).mean}
        datr3[2] = datr3[2].collect{ |ele| ele / (datr3[2]).standard_deviation}
        datr3 = datr3.transpose
        theta = Rotate.angle_guess_2d(datr3)
        datr2 = Rotate.rotate_2d(datr3, theta).transpose
        if Rotate.slope(N[*datr2[1]],N[*datr3.transpose[2]]) < 0.0
          datr2[0] = datr2[0].collect{ |ele| ele *-1.0}
          datr2[1] = datr2[1].collect{ |ele| ele *-1.0}
        end
        big_4 = [datr2[0],datr2[1],datr3.transpose[2]].transpose
        data = big_4 + big_1 + big_2 + big_3

        data = Algorithm.feature_matrix(data.transpose).transpose
        logistic_guess = Algorithm.nonlinear_logistic_regression_tester(choices ,data,pol,pol2, [xx[0].length, x1[0].length, x2[0].length, x3[0].length])
        p "Exercise is a: " + choices[logistic_guess].to_s
        end_time = Time.now
        p "this took: " + (end_time - beginning_time).to_s + "  seconds!"
        p "========================"
        return choices[logistic_guess].to_s
        # result = RubyProf.stop
        # printer = RubyProf::CallStackPrinter.new(result)
        # File.open("tmp/profile_data2.html", 'w') { |file| printer.print(file) }
    end
end
